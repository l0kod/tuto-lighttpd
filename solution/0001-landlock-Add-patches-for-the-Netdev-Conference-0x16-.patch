From 4f36c83eb069c43cf55ed580db75354afb856351 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Wed, 11 Jan 2023 16:46:05 +0000
Subject: [PATCH] landlock: Add patches for the Netdev Conference 0x16 tutorial

---
 0001-landlock-Define-syscalls.patch           |  47 ++++++++
 0002-landlock-Add-TCP-bind-port.patch         |  52 +++++++++
 ...dd-a-ruleset_fd-to-the-server-struct.patch | 106 ++++++++++++++++++
 0004-landlock-Restrict-main-process.patch     |  30 +++++
 ...andlock-Fix-restriction-with-prctl-2.patch |  42 +++++++
 PKGBUILD                                      |  20 +++-
 6 files changed, 296 insertions(+), 1 deletion(-)
 create mode 100644 0001-landlock-Define-syscalls.patch
 create mode 100644 0002-landlock-Add-TCP-bind-port.patch
 create mode 100644 0003-landlock-Add-a-ruleset_fd-to-the-server-struct.patch
 create mode 100644 0004-landlock-Restrict-main-process.patch
 create mode 100644 0005-landlock-Fix-restriction-with-prctl-2.patch

diff --git a/0001-landlock-Define-syscalls.patch b/0001-landlock-Define-syscalls.patch
new file mode 100644
index 0000000..f99d9a0
--- /dev/null
+++ b/0001-landlock-Define-syscalls.patch
@@ -0,0 +1,47 @@
+From 8f034830ff2d89bb60718570ef0c47781eed4a7d Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Micka=C3=ABl=20Sala=C3=BCn?= <mic@digikod.net>
+Date: Sun, 23 Oct 2022 20:38:36 +0200
+Subject: [PATCH 1/5] landlock: Define syscalls
+
+---
+ src/landlock.h | 28 ++++++++++++++++++++++++
+ 1 file changed, 28 insertions(+)
+ create mode 100644 src/landlock.h
+
+diff --git a/src/landlock.h b/src/landlock.h
+new file mode 100644
+index 000000000000..54f3417607d1
+--- /dev/null
++++ b/src/landlock.h
+@@ -0,0 +1,28 @@
++/* Landlock syscalls - Imported from Linux's samples/landlock/sandboxer.c */
++
++/* Must be an up-to-date landlock.h file. */
++#include <linux/landlock.h>
++#include <sys/syscall.h>
++#include <unistd.h>
++
++static inline int
++landlock_create_ruleset(const struct landlock_ruleset_attr *const attr,
++			const size_t size, const __u32 flags)
++{
++	return syscall(__NR_landlock_create_ruleset, attr, size, flags);
++}
++
++static inline int landlock_add_rule(const int ruleset_fd,
++				    const enum landlock_rule_type rule_type,
++				    const void *const rule_attr,
++				    const __u32 flags)
++{
++	return syscall(__NR_landlock_add_rule, ruleset_fd, rule_type, rule_attr,
++		       flags);
++}
++
++static inline int landlock_restrict_self(const int ruleset_fd,
++					 const __u32 flags)
++{
++	return syscall(__NR_landlock_restrict_self, ruleset_fd, flags);
++}
+-- 
+2.38.1
+
diff --git a/0002-landlock-Add-TCP-bind-port.patch b/0002-landlock-Add-TCP-bind-port.patch
new file mode 100644
index 0000000..9b3b610
--- /dev/null
+++ b/0002-landlock-Add-TCP-bind-port.patch
@@ -0,0 +1,52 @@
+From acfddfe6cd5f9332df228c38f7ccc0e886542785 Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Micka=C3=ABl=20Sala=C3=BCn?= <mic@digikod.net>
+Date: Sun, 23 Oct 2022 20:38:36 +0200
+Subject: [PATCH 2/5] landlock: Add TCP bind port
+
+---
+ src/network.c | 15 +++++++++++++++
+ 1 file changed, 15 insertions(+)
+
+diff --git a/src/network.c b/src/network.c
+index dd878768e762..2dfc43158aad 100644
+--- a/src/network.c
++++ b/src/network.c
+@@ -10,6 +10,7 @@
+ 
+ #include "network_write.h"
+ #include "sys-socket.h"
++#include "landlock.h"
+ 
+ #include <sys/types.h>
+ #include <sys/stat.h>
+@@ -210,6 +211,12 @@ static int network_host_parse_addr(server *srv, sock_addr *addr, socklen_t *addr
+     const char *chost;
+     sa_family_t family = use_ipv6 ? AF_INET6 : AF_INET;
+     unsigned int port = srv->srvconf.port;
++    struct landlock_net_service_attr net_service = {
++        .allowed_access = LANDLOCK_ACCESS_NET_BIND_TCP,
++        .port = port,
++    };
++    int ruleset_fd = -1;
++
+     if (buffer_is_blank(host)) {
+         log_error(srv->errh, __FILE__, __LINE__,
+           "value of $SERVER[\"socket\"] must not be empty");
+@@ -262,6 +269,14 @@ static int network_host_parse_addr(server *srv, sock_addr *addr, socklen_t *addr
+         sock_addr_from_str_hints(addr,addr_len,chost,family,port,srv->errh)) {
+         return -1;
+     }
++    if (ruleset_fd != -1) {
++        log_error(srv->errh, __FILE__, __LINE__, "INFO: Adding Landlock rule for port %u", net_service.port);
++        if (landlock_add_rule(ruleset_fd, LANDLOCK_RULE_NET_SERVICE, &net_service, 0)) {
++            log_perror(srv->errh, __FILE__, __LINE__, "Landlock rule creation failed for port %u", net_service.port);
++        }
++    } else {
++        log_error(srv->errh, __FILE__, __LINE__, "INFO: No Landlock rule for port %u", net_service.port);
++    }
+     return 0;
+ }
+ 
+-- 
+2.38.1
+
diff --git a/0003-landlock-Add-a-ruleset_fd-to-the-server-struct.patch b/0003-landlock-Add-a-ruleset_fd-to-the-server-struct.patch
new file mode 100644
index 0000000..26bbbfd
--- /dev/null
+++ b/0003-landlock-Add-a-ruleset_fd-to-the-server-struct.patch
@@ -0,0 +1,106 @@
+From 51d4c3d6d595f0072bead628c7861dc3fe27e976 Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Micka=C3=ABl=20Sala=C3=BCn?= <mic@digikod.net>
+Date: Sun, 23 Oct 2022 20:38:37 +0200
+Subject: [PATCH 3/5] landlock: Add a ruleset_fd to the server struct
+
+---
+ src/base.h    |  1 +
+ src/network.c |  5 ++---
+ src/server.c  | 17 +++++++++++++++++
+ 3 files changed, 20 insertions(+), 3 deletions(-)
+
+diff --git a/src/base.h b/src/base.h
+index 5e3dadf9d09f..bcd2173b059f 100644
+--- a/src/base.h
++++ b/src/base.h
+@@ -186,6 +186,7 @@ struct server {
+ 	gid_t gid;
+ 	pid_t pid;
+ 	int stdin_fd;
++	int ruleset_fd;
+ 
+ 	const buffer *default_server_tag;
+ 	char **argv;
+diff --git a/src/network.c b/src/network.c
+index 2dfc43158aad..8ddc702e833e 100644
+--- a/src/network.c
++++ b/src/network.c
+@@ -215,7 +215,6 @@ static int network_host_parse_addr(server *srv, sock_addr *addr, socklen_t *addr
+         .allowed_access = LANDLOCK_ACCESS_NET_BIND_TCP,
+         .port = port,
+     };
+-    int ruleset_fd = -1;
+ 
+     if (buffer_is_blank(host)) {
+         log_error(srv->errh, __FILE__, __LINE__,
+@@ -269,9 +268,9 @@ static int network_host_parse_addr(server *srv, sock_addr *addr, socklen_t *addr
+         sock_addr_from_str_hints(addr,addr_len,chost,family,port,srv->errh)) {
+         return -1;
+     }
+-    if (ruleset_fd != -1) {
++    if (srv->ruleset_fd != -1) {
+         log_error(srv->errh, __FILE__, __LINE__, "INFO: Adding Landlock rule for port %u", net_service.port);
+-        if (landlock_add_rule(ruleset_fd, LANDLOCK_RULE_NET_SERVICE, &net_service, 0)) {
++        if (landlock_add_rule(srv->ruleset_fd, LANDLOCK_RULE_NET_SERVICE, &net_service, 0)) {
+             log_perror(srv->errh, __FILE__, __LINE__, "Landlock rule creation failed for port %u", net_service.port);
+         }
+     } else {
+diff --git a/src/server.c b/src/server.c
+index adfb544caa4a..0a02f49f986c 100644
+--- a/src/server.c
++++ b/src/server.c
+@@ -19,6 +19,7 @@
+ #include "network_write.h"  /* network_write_show_handlers() */
+ #include "reqpool.h"        /* request_pool_init() request_pool_free() */
+ #include "response.h"       /* http_response_send_1xx_cb_set() strftime_cache_reset() */
++#include "landlock.h"
+ 
+ #ifdef HAVE_VERSIONSTAMP_H
+ # include "versionstamp.h"
+@@ -328,6 +329,7 @@ static server *server_init(void) {
+ 	srv->loadavg[1] = 0.0;
+ 	srv->loadavg[2] = 0.0;
+ 	srv->stdin_fd = -1;
++	srv->ruleset_fd = -1;
+ 	srv->default_server_tag = &default_server_tag;
+ 
+ 	log_con_jqueue = (connection *)(uintptr_t)&log_con_jqueue;/*(sentinel)*/
+@@ -352,6 +354,7 @@ static void server_free(server *srv) {
+ 	if (srv->stdin_fd >= 0) {
+ 		close(srv->stdin_fd);
+ 	}
++	close(srv->ruleset_fd);
+ 
+ 	buffer_free(srv->tmp_buf);
+ 
+@@ -1085,6 +1088,11 @@ static int server_main_setup (server * const srv, int argc, char **argv) {
+ 	int parent_pipe_fd = -1;
+ #endif
+ 
++	const struct landlock_ruleset_attr ruleset_attr = {
++        .handled_access_net = LANDLOCK_ACCESS_NET_BIND_TCP |
++            LANDLOCK_ACCESS_NET_CONNECT_TCP,
++	};
++
+ #ifdef HAVE_GETUID
+ 	i_am_root = (0 == getuid());
+ #endif
+@@ -1184,6 +1192,15 @@ static int server_main_setup (server * const srv, int argc, char **argv) {
+ 		return 0;
+ 	}
+ 
++    // TODO: Check Landlock ABI and properly handle compatibility thanks to
++    // LANDLOCK_CREATE_RULESET_VERSION.
++    srv->ruleset_fd = landlock_create_ruleset(&ruleset_attr, sizeof(ruleset_attr), 0);
++    if (srv->ruleset_fd == -1) {
++        log_perror(srv->errh, __FILE__, __LINE__, "Landlock ruleset creation failed");
++    } else {
++        log_error(srv->errh, __FILE__, __LINE__, "INFO: Landlock ruleset creation successful");
++    }
++
+ 	if (oneshot_fd) {
+ 		if (oneshot_fd <= STDERR_FILENO) {
+ 			log_error(srv->errh, __FILE__, __LINE__,
+-- 
+2.38.1
+
diff --git a/0004-landlock-Restrict-main-process.patch b/0004-landlock-Restrict-main-process.patch
new file mode 100644
index 0000000..27dc369
--- /dev/null
+++ b/0004-landlock-Restrict-main-process.patch
@@ -0,0 +1,30 @@
+From 7d22d0e50645e8e33e30e2264eca89e8a78deeb0 Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Micka=C3=ABl=20Sala=C3=BCn?= <mic@digikod.net>
+Date: Sun, 23 Oct 2022 20:38:37 +0200
+Subject: [PATCH 4/5] landlock: Restrict main process
+
+---
+ src/network.c | 7 +++++++
+ 1 file changed, 7 insertions(+)
+
+diff --git a/src/network.c b/src/network.c
+index 8ddc702e833e..022d51a63456 100644
+--- a/src/network.c
++++ b/src/network.c
+@@ -549,6 +549,13 @@ static int network_server_init(server *srv, const network_socket_config *s, buff
+ 		}
+ 	}
+ 
++	if (srv->ruleset_fd != -1) {
++            if (landlock_restrict_self(srv->ruleset_fd, 0)) {
++                log_perror(srv->errh, __FILE__, __LINE__, "Landlock restriction failed");
++                return -1;
++            }
++        }
++
+ 	if (-1 != stdin_fd) { } else
+ 	if (0 != bind(srv_socket->fd, (struct sockaddr *) &(srv_socket->addr), addr_len)) {
+ 		log_perror(srv->errh, __FILE__, __LINE__,
+-- 
+2.38.1
+
diff --git a/0005-landlock-Fix-restriction-with-prctl-2.patch b/0005-landlock-Fix-restriction-with-prctl-2.patch
new file mode 100644
index 0000000..69dae2b
--- /dev/null
+++ b/0005-landlock-Fix-restriction-with-prctl-2.patch
@@ -0,0 +1,42 @@
+From 09b8b80757c1e0b4200624db5f1c81ca905e7514 Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Micka=C3=ABl=20Sala=C3=BCn?= <mic@digikod.net>
+Date: Sun, 23 Oct 2022 20:38:38 +0200
+Subject: [PATCH 5/5] landlock: Fix restriction with prctl(2)
+
+---
+ src/network.c | 8 ++++++++
+ 1 file changed, 8 insertions(+)
+
+diff --git a/src/network.c b/src/network.c
+index 022d51a63456..f2f354ecd4a7 100644
+--- a/src/network.c
++++ b/src/network.c
+@@ -12,6 +12,7 @@
+ #include "sys-socket.h"
+ #include "landlock.h"
+ 
++#include <sys/prctl.h>
+ #include <sys/types.h>
+ #include <sys/stat.h>
+ #include "sys-time.h"
+@@ -550,10 +551,17 @@ static int network_server_init(server *srv, const network_socket_config *s, buff
+ 	}
+ 
+ 	if (srv->ruleset_fd != -1) {
++            if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {
++                log_perror(srv->errh, __FILE__, __LINE__, "Set no-new-privs failed");
++                return -1;
++            }
+             if (landlock_restrict_self(srv->ruleset_fd, 0)) {
+                 log_perror(srv->errh, __FILE__, __LINE__, "Landlock restriction failed");
+                 return -1;
+             }
++            log_error(srv->errh, __FILE__, __LINE__, "INFO: Landlock restriction successful");
++        } else {
++            log_error(srv->errh, __FILE__, __LINE__, "INFO: No Landlock restriction");
+         }
+ 
+ 	if (-1 != stdin_fd) { } else
+-- 
+2.38.1
+
diff --git a/PKGBUILD b/PKGBUILD
index 689ccd8..9103571 100644
--- a/PKGBUILD
+++ b/PKGBUILD
@@ -16,7 +16,12 @@ optdepends=('libxml2: mod_webdav'
 backup=('etc/lighttpd/lighttpd.conf' 'etc/logrotate.d/lighttpd')
 options=('emptydirs')
 source=("https://download.lighttpd.net/lighttpd/releases-1.4.x/lighttpd-${pkgver}.tar.xz"{,.asc}
-        'lighttpd.logrotate.d' 'lighttpd.conf' 'lighttpd.tmpfiles' 'lighttpd.service')
+        'lighttpd.logrotate.d' 'lighttpd.conf' 'lighttpd.tmpfiles' 'lighttpd.service'
+        '0001-landlock-Define-syscalls.patch'
+        '0002-landlock-Add-TCP-bind-port.patch'
+        '0003-landlock-Add-a-ruleset_fd-to-the-server-struct.patch'
+        '0004-landlock-Restrict-main-process.patch'
+        '0005-landlock-Fix-restriction-with-prctl-2.patch')
 sha256sums=('e56f37ae52b63e1ada4d76ce78005affb6e56eea2f6bdb0ce17d6d36e9583384'
             'SKIP'
             '41f6c0042bb61021553779f861910e335834f6c15e4411756cdc6233b31076fe'
@@ -27,6 +32,19 @@ validpgpkeys=('C7CA1E9E29DC77F5480894B2E0E7D0171E95BAD7'
               '649D0DD767FF206202A76C5158F14A786FE198C8'
               'EAAF41A8BE3BB8D001CACD136DE62CA242909B84')
 
+prepare() {
+	cd "$srcdir/$pkgname-$pkgver"
+
+	local src
+	for src in "${source[@]}"; do
+		src="${src%%::*}"
+		src="${src##*/}"
+		[[ $src = *.patch ]] || continue
+		echo "Applying patch $src..."
+		patch -Np1 < "../$src"
+	done
+}
+
 build() {
 	cd "$srcdir/$pkgname-$pkgver"
 
-- 
2.39.0

